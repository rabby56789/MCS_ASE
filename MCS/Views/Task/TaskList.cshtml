@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<!--單頁功能獨立樣式表-->
@section Custom
{
    <link href="~/Content/jq-content.css" rel="stylesheet" type="text/css" />
    <link href="~/Content/jq-bootstrap-modal.css" rel="stylesheet" type="text/css" />
    <style>
        #btnImportTask {
            width: 120px;
        }
        /*#import_file {
            margin-top: -27px;
            margin-bottom: 8px;
            width: 100%;
            opacity: 0;
        }*/

    </style>
}
<div id="content" class="content-page">
    <input type="hidden" id="funcName" value="tasklist" /> <!--頁面功能名稱,每頁必加-->
    <!--查詢條件區域-->
    <div class="form-group search-form">
        <div class="button btn-block" type="button" data-toggle="collapse" data-target="#searchConditions" aria-expanded="true" aria-controls="searchConditions">
            <span data-lngKey="searchCondition" class="caret"></span>
        </div>
        <div id="searchConditions" class="collapse show search-content">
            <form id="formQuery">
                <div class="row">
                    <div class="col-md-6">
                        <!--floating-labels使用必加div外框與class屬性-->
                        <div class="form-label-group in-border ">
                            <input id="task_id" name="TASKCODE" type="text" class="form-control" />
                            <!--label必須放在input之後,否則文字會在輸入框內-->
                            <!--必填欄位 form-lebel-group 層div 必須加 must-input 的Class屬性-->
                            <label data-lngKey="task_id" for="task_id"></label>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-label-group in-border ">
                            <input id="AGV_id" name="AGVCODE" type="text" class="form-control" />
                            <label data-lngKey="AGV_id" for="AGV_id"></label>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-label-group in-border ">
                            <input id="foil_id" name="MATERIALLOT" type="text" class="form-control" />
                            <label data-lngKey="foil_id" for="foil_id"></label>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-label-group in-border ">
                            <select id="task_status" name="TASKSTATUS" class="form-control required">
                                @*<option value="" disabled selected>任務狀態</option>*@
                                <option value="0">未建立</option>
                                <option value="1">待執行</option>
                                <option value="2">執行中</option>
                            </select>
                            <label data-lngKey="status" for="Combo-Device"></label>
                        </div>
                    </div>

                    <div class="col-md align-self-end align-items-end form-group">
                        <button data-lngKey="search" type="button" id="btnQuery" class="button float-right log"></button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!--資料顯示表格區-->
    <div class="tableParent" ">
        <div id="toolbar">
            <a href="#" id="btnCreate" class="easyui-linkbutton log" plain="true" data-lngKey="create"><i class="fas fa-file-medical fa-lg"></i></a>
            <a href="#" id="btnCancel" class="easyui-linkbutton log" plain="true" data-lngKey="cancel"><i class="fas fa-window-close fa-lg"></i></a>

        </div>
        <table id="dg"></table>
    </div>

    <!--彈出式編輯視窗-->
    <div id="modal_edit" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title"><span id="span_action"></span></h4>
                    <button type="button" id="btnCloseModal_edit" class="close log" data-dismiss="modal">&times;</button>
                </div>
                <div class="modal-body">
                    <form id="formEdit">
                        <div class="row">
                            <div class="col-md-12 form-group">
                                <div class="form-label-group in-border must-input agv-content">
                                    <input id="edit_task_input" name="TASK_NAME" class="form-control">
                                    <label for="edit_task_id" data-lngKey="task"></label>
                                    <button data-target-name="query_task_id" type="button" id="edit_task" class="button queryBtn float-right log">
                                        <i class="fas fa-external-link-alt"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" id="btnAccept" class="btn btn-primary log ajaxRequest" data-dismiss="modal" data-lngKey="ok">確定</button>
                </div>
            </div>
        </div>
    </div>
    <!--上傳XML-->
    <div id="modal_import" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title"><span id="span_action"></span></h4>
                    <button type="button" id="btnCloseModal_edit" class="close log" data-dismiss="modal">&times;</button>
                </div>
                <div class="modal-body">
                    <form id="formImport">
                        <div class="row">

                            <div class="col-md-12 form-group">
                                <div class="form-label-group in-border must-input">
                                    <!--這一行是假的filebox-->
                                    <!--這一行是被隱藏起來的真filebox，用css將opacity(不透明度)設為0，再用margin(外邊距)給調整到與上方的textbox重疊的位置-->
                                    @*<input id="fileBox" name="fileBox" onchange="inFalseFilebox(this,'false_fileBox')" type="file" class="file" />*@
                                    <input id="import_file" name="FILE" type="file" class="form-control" />
                                    <label for="import_file" data-lngKey="file"></label>
                                    <!--上傳按鈕，會用他來觸發檔案上傳的事件-->
                                    @*<button type="button" onclick="MapAccept('import_file')">上傳</button>*@
                                </div>
                            </div>

                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" id="btnMapAccept" class="btn btn-primary log ajaxRequest" data-dismiss="modal" data-lngKey="ok"></button>
                </div>
            </div>
        </div>
    </div>
    <!--樓層選擇視窗-->
    <div id="modal_Task" class="modal fade" role="dialog">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 id="taskModalTitle" class="modal-title"></h4>
                    <button type="button" id="btnCloseModal_edit" class="close log" data-dismiss="modal">&times;</button>
                </div>
                <div class="modal-body">
                    <form id="formQueryB">
                        <div class="row">
                            <div class="col-md-5 form-group">
                                <div class="form-label-group in-border">
                                    <input id="query_taskId" name="TASK_ID" type="text" class="form-control" />
                                    <label for="query_taskId" data-lngKey="taskId"></label>
                                </div>
                            </div>
                            <div class="col-md-5 form-group">
                                <div class="form-label-group in-border">
                                    <input id="query_taskName" name="TASK_NAME" type="text" class="form-control" />
                                    <label for="query_taskName" data-lngKey="taskName"></label>
                                </div>
                            </div>
                            <div class="col-md-2 form-group">
                                <button type="button" id="btnQueryTask" class="btn btn-primary log ajaxRequest" data-lngKey="search"></button>
                            </div>
                        </div>
                    </form>
                    <table id="dgB"></table>
                </div>
                <div class="modal-footer">
                    <button type="button" id="btnTask" class="btn btn-primary log ajaxRequest" data-dismiss="modal" data-lngKey="ok"></button>
                </div>
            </div>
        </div>
    </div>

</div>


<script>
    let action = "";
    let selectedIndex;
    let selectedGUID;
    let selectedTASKCODE;
    //let factoryGUID;
    //let editfactoryGUID;
    //let queryfactoryGUID;
    //let importfactoryGUID;
    let floortargetId;
    let taskGUID = "";
    let taskID = "";
    let addfloorGUID;
    //let floorName;
    let queryParams, queryParamsB;
    let lastPage;
    let doc;
    let bannedModify = []; //禁止修改的欄位input name

    //頁面元件初始化
    function PageInit() {
        $('#dg').datagrid({
            url: '../api/ApiTaskList/Query',
            method: 'POST',
            toolbar: '#toolbar',
            singleSelect: true,
            pagination: true, //顯示資料換頁工具列
            fit: true, //固定Grid高度,需指定
            sortName: 'REQCODE',
            emptyMsg: '<div style="text-align:center">No data.</div>',
            columns: [[
                { field: 'GUID', title: '', width: '0%', hidden: true },
                { field: 'TASKCODE', title: doc.getTextByKey('taskid'), sortable: true },
                { field: 'STATUS', title: doc.getTextByKey('status'), sortable: true },
                { field: 'AGVCODE', title: doc.getTextByKey('AGVid'), sortable: true },
                { field: 'PODCODE', title: doc.getTextByKey('podcode'), sortable: true },
                //{ field: 'POSITIONCODE1', title: doc.getTextByKey('startingpoint'), sortable: true },
                { field: 'POSITIONCODEPATH', title: doc.getTextByKey('positioncodepath'), sortable: true }
            ]],
            onSelect: function (index, field) {
                selectedGUID = field.GUID;
                selectedTASKCODE = field.TASKCODE;
                selectedIndex = index;

                $('#btnCancel').linkbutton('enable');

            }, onBeforeLoad: function (param) {
                if (action != 'query') {

                    return false; //預設初次載入頁面不查詢
                } else {

                }

            }, onLoadSuccess: function (rows) {
                selectedGUID = undefined;
                selectedIndex = undefined;

                $('#btnCancel').linkbutton('disable');
                //bindresize(this);
            }
        });

        //資料換頁工具列文字顯示
        var p = $('#dg').datagrid('getPager');
        $(p).pagination({
            pageSize: 10,
            pageList: [5, 10, 15],
            beforePageText: doc.getTextByKey('beforePageText'),
            afterPageText: doc.getTextByKey('afterPageText'),
            displayMsg: doc.getTextByKey('displayMsg')
        });
        //$('#btnAdd').linkbutton('disable');
        $('#btnCancel').linkbutton('disable');
        //$('#btnExportOnGrid').linkbutton('disable');

        //停用輸入欄位的自動完成
        let tagArr = document.getElementsByTagName("input");
        for (let i = 0; i < tagArr.length; i++) {
            tagArr[i].autocomplete = 'off';
        }

        //套用浮動輸入欄位標籤樣式
        let labels = document.getElementsByTagName('LABEL');
        for (let i = 0; i < labels.length; i++) {
            if (labels[i].htmlFor != '') {
                let elem = document.getElementById(labels[i].htmlFor);
                if (elem) {
                    elem.setAttribute("placeholder", labels[i].textContent);
                }
            }
        }

        //#region 彈出視窗設定
        $('#modal_edit').modal({
            show: false, //預設不顯示
            backdrop: 'static', //彈出視窗點背景無法關閉
            keyboard: false, //按Esc鍵不會關閉視窗
        });
        $('#modal_Task').modal({
            show: false, //預設不顯示
            backdrop: 'static', //彈出視窗點背景無法關閉
            keyboard: false, //按Esc鍵不會關閉視窗
        });
        //$('#MapUpload').modal({
        //    show: false, //預設不顯示
        //    backdrop: 'static', //彈出視窗點背景無法關閉
        //    keyboard: false, //按Esc鍵不會關閉視窗
        //});
        $('#modal_import').modal({
            show: false, //預設不顯示
            backdrop: 'static', //彈出視窗點背景無法關閉
            keyboard: false, //按Esc鍵不會關閉視窗
        });
        //#endregion

        setNotNull();

        //設定事件綁定
        bindActionEvent();
        bindAjaxEvent();
        //debugger;
        //refreshDorpDownListItems("edit_factory", "../api/ApiTaskList/GetDataList", "");
        //refreshDorpDownListItems("query_factory", "../api/ApiTaskList/GetDataList", "");
        //refreshDorpDownListItems("import_factory", "../api/ApiTaskList/GetDataList", "");
    }

    //事件綁定
    function PageEventBind() {
        $('#btnQuery').on('click', () => { Query(1) });
        //$('#btnAdd').on('click', Add);
        $('#btnCancel').on('click', Cancel);
        $('#btnCreate').on('click', Create);

        $('#btnExportOnGrid').on('click', ExportOnClick);
        $('#btnImportTask').on('click', ImportOnClick);
        $('#btnAccept').on('click', Accept);
        $('#btnMapAccept').on('click', MapAccept);

        $('.btn-confirm').on('click', Confirm);

        $('#edit_task').on('click', TaskSnow);
        //$('#query_floor').on('click', FloorSnow);
        //$('#import_floor').on('click', FloorSnow);

        //$('#edit_factory').on('change', onSelectOptionChange);
        //$('#query_factory').on('change', onSelectOptionChange);
        //$('#import_factory').on('change', onSelectOptionChange);

        $('#query_phase').on('change', onSelectOptionChange);
        $('#query_depart').on('change', onSelectOptionChange);

        $('#btnQueryTask').on('click', queryB);
        $('#btnTask').on('click', task);

        $('#modal_edit').on('show.bs.modal', onEditModalShow);
        $('#modal_editb').on('show.bs.modal', onEditModalShowB);
        $('#modal_Task').on('show.bs.modal', beforeFloorModalShow);
        $('#modal_Task').on('shown.bs.modal', onFloorModalShow);
        //$('#MapUpload').on('show.bs.modal', beforeFloorModalShow);
        //$('#MapUpload').on('shown.bs.modal', onFloorModalShow);
        $('#modal_import').on('show.bs.modal', beforeFloorModalShow);
        $('#modal_import').on('shown.bs.modal', onFloorModalShow);
        $(window).on("resize", resizeLayout);
    }

    //重設頁面元件大小
    function resizeLayout() {
        //重設手風琴選單大小
        $('#formQueryPanel').accordion('resize');
        //重設Grid大小
        $('#dg').datagrid('resize');
    }

    //必填欄位上色
    function setNotNull(tableName) {
        $('#edit_name').addClass('required');
        $('#edit_id').addClass('required');
    }

    //查詢
    async function Query(pageIdx) {
        action = 'query';
        selectedGUID = undefined;
        selectedIndex = undefined;

        $('#btnEdit').linkbutton('disable');
        $('#btnDelete').linkbutton('disable');

        queryParams = $('#formQuery').serializeObject();
        //#region 取得日期時間元件資料內容
        //取得單一日期
        //let objDateStart = $('#query_insertDateStart').datepicker().data('datepicker').selectedDates[0];
        //let objDateEnd = $('#query_insertDateEnd').datepicker().data('datepicker').selectedDates[0];

        //取得單一時間


        //取得日期時間區間
        //let dateTimeRange = $('#queryDateTimeRange').datepicker().data('datepicker').selectedDates;


        //取得日期區間

        //#endregion
        //let dateStart = !objDateStart ? "" : objDateStart.DTformatJtoC();
        //let dateEnd = !objDateEnd ? "" : objDateEnd.DTformatJtoC();

        //if (dateTimeValidation(dateStart, dateEnd, '<=') == false) {
        //    toastr.error(
        //        globalDoc.getTextByKey('error'),
        //        globalDoc.getTextByKey('dateRangeError')
        //    );
        //    return;
        //}

        //queryParams = {

        //    INSERT_TIME_START: dateStart,
        //    INSERT_TIME_END: dateEnd,
        //    //NOT_AUTHORITY: $('#query_authorityStatus').is(":checked") ? true : false
        //};

        await new Promise((resolve, reject) => {
            $.ajax({
                type: "POST",
                url: "../api/ApiTaskBuild/Count",
                data: queryParams,
                dataType: "json",
                success: function (response) {
                    queryParams.total = response.count;
                    resolve(queryParams);

                }
            });
        }).then((parms) => {
            $("#dg").datagrid('options').queryParams = parms;
            $('#dg').datagrid('gotoPage', pageIdx);

            return;
        }).then(() => {
            $('#btnExportOnGrid').linkbutton('enable');
            $('.ajaxRequest').attr('disabled', false);
        });
    }
    //查詢B表
    function queryB() {
        queryParamsB = new Object();
        queryParamsB = $('#formQueryB').serializeObject();
        $('#dgB').datagrid('options').queryParams = queryParamsB;
        $('#dgB').datagrid('gotoPage', 1);
    }

    //樓層選擇
    function task() {
        $('#modal_Task').modal('hide');

    }

    //新增,清空欄位後開窗
    function Add() {
        if ($(this).linkbutton('options').disabled == true) return;

        action = 'add';
        //selectedGUID = "";

        let elm = document.getElementById("formEdit");

        for (let i = 0; i < elm.length; i++) {
            elm[i].value = "";
            elm[i].disabled = false;
        }
        $('#divAdd').show();
        $('#divAdd2').show();
        $('#modal_edit').modal('show');

    }
    //建立任務,清空欄位後開窗
    function Create() {
        if ($(this).linkbutton('options').disabled == true) return;

        action = 'create';
        //selectedGUID = "";

        let elm = document.getElementById("formEdit");

        for (let i = 0; i < elm.length; i++) {
            elm[i].value = "";
            elm[i].disabled = false;
        }
        //$('#divAdd').show();
        //$('#divAdd2').show();
        $('#modal_edit').modal('show');

    }
    //編輯
    function Edit() {
        if ($(this).linkbutton('options').disabled == true) return;

        let data = { GUID: selectedGUID };
        action = 'edit';

        $.ajax({
            type: "POST",
            url: "../api/ApiTaskList/GetOneByGUID",
            data: data,
            dataType: "json",
            success: function (data) {
                let userData = data.rows[0];
                let elm = document.getElementById("formEdit");

                for (let i = 0; i < elm.length; i++) {
                    let name = elm[i].name;
                    $(elm[i]).val(userData[name]);

                    if (bannedModify.includes(name)) {

                    }
                }
            },
            complete: function (url) {
                $('#divAdd').hide();
                $('#divAdd2').hide();
                $('#modal_edit').modal('show');
            }
        });
    }

    //刪除
    function Delete() {
        if ($(this).linkbutton('options').disabled == true) return;

        action = 'delete';

        JQMessageBox(
            globalDoc.getTextByKey('confirm'),
            globalDoc.getTextByKey('delMsg'),
            {
                'Y': globalDoc.getTextByKey('y'),
                'N': globalDoc.getTextByKey('n')
            },
            Confirm
        );
    }
    //取消任務
    function Cancel() {
        if ($(this).linkbutton('options').disabled == true) return;

        action = 'cancel';

        JQMessageBox(
            globalDoc.getTextByKey('confirm'),
            globalDoc.getTextByKey('cancelMsg'),
            {
                'Y': globalDoc.getTextByKey('y'),
                'N': globalDoc.getTextByKey('n')
            },
            Confirm
        );
    }
    //樓層選擇開窗
    function TaskSnow(e) {
        let targetId = e.target.id;

        //switch (targetId) {
        //    case "query_floor":
        //        //factoryGUID = queryfactoryGUID;
        //        floortargetId = targetId;
        //        break;
        //    case "btnFloor":
        //        //factoryGUID = editfactoryGUID;
        //        floortargetId = targetId;
        //        break;
        //    case "import_floor":
        //        //factoryGUID = importfactoryGUID;
        //        floortargetId = targetId;
        //        break;
        //}
        $('#modal_Task').modal('show');
    }
    //地圖上傳開窗
    function ImportOnClick() {
        //$('#MapUpload').modal('show');
        $('#modal_import').modal('show');
    }
    function beforeFloorModalShow(e) {
        let inputElms = document.forms["formQueryB"].getElementsByTagName("input");
        //清空輸入欄位
        for (let i = 0; i < inputElms.length; i++) {
            inputElms[i].value = "";
        }
        //變更標題
        $('#taskModalTitle').text(doc.getTextByKey("selectTask"));
        queryParamsB = null;
    }
    //事件:樓層選擇視窗開啟
    function onFloorModalShow(e) {
        $('#btnTask').text(globalDoc.getTextByKey('ok'));

        tableInitB();
        $('#dgB').datagrid('loadData', { "total": 0, "rows": [] });
        $('#btnTask').attr('disabled', true);
    }
    function tableInitB() {
        $('#dgB').datagrid({
            url: '../api/ApiTask/Query',
            method: 'POST',
            singleSelect: true,
            height: 350,
            sortName: 'TASK_ID',
            emptyMsg: '<div style="text-align:center">No data.</div>',
            columns: [[
                { field: 'GUID', title: '', width: '0%', hidden: true },
                { field: 'TASK_ID', title: doc.getTextByKey('taskId'), width: '50%', sortable: true },
                { field: 'TASK_NAME', title: doc.getTextByKey('taskName'), width: '50%', sortable: true }
            ]],
            onSelect: function (index, field) {
                $('#btnTask').attr('disabled', false);
                taskGUID = field.GUID;
                taskNAME = field.TASK_NAME;
                taskID = field.TASK_ID;
                $('#edit_task_input').val(field.TASK_NAME);


            }, onBeforeLoad: function (param) {
                if (queryParamsB === null) {
                    return false; //無參數時不查詢
                } else {

                    //param.FACTORY_GUID = factoryGUID;
                    //param.EMPLOYEE_ID = queryParamsB.EMPLOYEE_ID;
                }
            }, onLoadSuccess: function (rows) {
                $('#btnQueryTask').attr('disabled', false);
                $('#btnTask').attr('disabled', true);
                guidB = null;
            }
        });

    }
    //事件:顯示資料編輯視窗,動態更新標題用
    function onEditModalShow(e) {
        let formTitle = $('#span_action')[0];

        switch (action) {
            case "add":
                formTitle.innerText = globalDoc.getTextByKey("add");
                break;
            case "edit":
                formTitle.innerText = globalDoc.getTextByKey("edit");
                break;
            default:
                formTitle.innerText = globalDoc.getTextByKey("create");
                break;
        }

        $('#btnAccept').text(globalDoc.getTextByKey("ok"));
    }
    //事件:顯示資料編輯視窗,動態更新標題用
    function onEditModalShowB(e) {
        let formTitle = $('#span_action')[0];

        switch (action) {
            case "add":
                formTitle.innerText = globalDoc.getTextByKey("add");
                break;
            case "edit":
                formTitle.innerText = globalDoc.getTextByKey("edit");
                break;
            default:
                formTitle.innerText = globalDoc.getTextByKey("create");
                break;
        }

        $('#btnAccept').text(globalDoc.getTextByKey("ok"));
    }
    //匯出(從DataGrid)
    function ExportOnClick() {
        if ($(this).linkbutton('options').disabled == true) return;
        Export();
    }

    //匯出(從DB)
    function Export() {
        $.post("../api/ApiTaskList/Export", queryParams, function (response) {
            let url = response.filePath;
            let $a = $('<a />', {
                'href': url,
                'download': null,
                'text': "click"
            }).hide().appendTo("body")[0].click();

            URL.revokeObjectURL(url);
            $('.ajaxRequest').attr('disabled', false);
        });
    }

    //importXML
    function MapAccept() {
        //var id = 'import_file';
        //取得該filebox中的檔案資料：
        //var files = document.getElementById(id).files;
        //用JQ也可以寫成：
        var files = $('#import_file')[0].files;

        //再來將剛剛取得的檔案資料放進FormData裡
        var fileData = new FormData();
        //files[0].name會回傳包含副檔名的檔案名稱
        //所以要做檔案類型的判斷也可以用file[0].name做
        fileData.append(files[0].name, files[0]);
        fileData.append("FLOOR_GUID", floorGUID);
        fileData.append("fileType", "taskList");
        fileData.append("INSERT_USER", sessionStorage.getItem("userGuid"));

        //fileData.append(data = $('#formImport').serializeObject());

        //之後送ashx做處理
        $.ajax({
            url: 'fileUpload.ashx',
            type: "post",
            data: fileData,
            contentType: false,
            processData: false,
            async: false,
            success: function () {
                //跳訊息提示
                alert('上傳成功!');
                //清掉假filebox中的內容
                document.getElementById('import_file').value = '';
            }
        });

    }
    //資料異動確認
    async function Accept() {
        let data, actionUrl, guid;
        let textOK,textNG;
        //let edit_factory = $("#edit_factory option:selected").text();
        // edit_floor = $('#edit_floor').val();
        //let edit_id = $('#edit_id').val();
        //let edit_name = $('#edit_name').val();
        //let edit_remark = $('#edit_remark').val();
        $('#modal_edit').modal('hide');

        data = $('#formEdit').serializeObject();
        //data.factoryGUID = factoryGUID
        if (action == "add") {
            data.INSERT_USER = sessionStorage.getItem("userGuid");
            data.FLOOR_GUID = floorGUID;
            //Query(99);
            //$('#dg').datagrid('gotoPage', 99);
        } else {
            data.GUID = selectedGUID;
            data.TASKCODE = selectedTASKCODE;
            data.UPDATE_USER = sessionStorage.getItem("userGuid");
        }
        if (action == "create") {
            data.INSERT_USER = sessionStorage.getItem("userGuid");
            data.TASK_GUID = taskGUID;
            data.TASK_ID = taskID;
        }
        switch (action) {
            case "add":
                actionUrl = "../api/ApiTaskList/Insert";
                //$('#dg').datagrid('gotoPage', 99);
                break;
            case "edit":
                actionUrl = "../api/ApiTaskList/Update";
                break;
            case "delete":
                actionUrl = "../api/ApiTaskList/Delete";
                break;
            case "cancel":
                actionUrl = "../api/ApiTaskList/Cancel";
                textOK = "task_cancel_ok";
                textNG = "task_cancel_failed";
                break;
            case "create":
                actionUrl = "../api/ApiTaskList/Create";
                textOK = "task_create_ok";
                textNG = "task_create_failed";
                break;
        }
        //取得目前頁面
        let currentPage = $('#dg').datagrid('options').pageNumber;
        let getSqlSucceed = await getSql($('#funcName').val(), action, data);

        $.ajax({
            type: "POST",
            url: actionUrl,
            data: data,
            dataType: "json",
            success: function (response) {
                if (response.result == "ok") {                    
                    toastr.success(
                        doc.getTextByKey(textOK),
                        globalDoc.getTextByKey('succeed')
                    );
                } else {
                    toastr.error(
                        doc.getTextByKey(textNG),
                        globalDoc.getTextByKey('error')
                    );
                };
                guid = response.guid;
                if (getSqlSucceed) {
                    saveRequestPerformanceLog(
                        sessionStorage.getItem('userGuid'),
                        sessionStorage.getItem('groupId')
                    );
                }
                if (action == "add") {
                    if (response.repeat == "true") {
                        $('#dg').datagrid('insertRow', {
                            //index: 15, // 索引從 0
                            row: {
                                GUID: guid,
                                FACTORY_NAME: edit_factory,
                                FLOOR_NAME: edit_floor,
                                ID: edit_id,
                                NAME: edit_name,
                                REMARK: edit_remark
                            }
                        });
                    }

                } else {
                    Query(currentPage);
                }


                $('.ajaxRequest').attr('disabled', false);
            }
        });
    }

    //確認視窗按鈕動作
    function Confirm(btnVal) {
        switch (btnVal) {
            case 'Y':
                switch (action) {
                    case 'cancel':
                        Accept();
                        break;

                }
                break;
            case 'N':

                break;
            case 'export':
                Export();
                break;
        }
    }

    //[DataGrid]轉換時間格式
    function convertTime(value, row, index) {
        return value.replace('T', ' ');
    }

    //#region 下拉選單方法群

    //刷新下拉選單項目(參數:目標select元件ID,資料來源URL,傳送參數) [是否移至共用區?]
    function refreshDorpDownListItems(targetSelectElementId, dataSourceUrl, parameters) {
        let elm = $('#' + targetSelectElementId);
        let optionElm = document.createElement("option");
        optionElm.setAttribute("value", "");

        //setElmLanguage(optionElm, "plzChoice");

        //移除並加入預設選項
        elm.find('option').remove().end();
        elm.append(optionElm);

        //沒輸入資料來源Url直接結束
        if (typeof (dataSourceUrl) == undefined) {
            return;
        }

        $.ajax({
            type: "POST",
            url: dataSourceUrl,
            data: parameters,
            dataType: "json",
            success: function (data) {
                data.rows.forEach(function (item) {
                    elm.append(`<option value="${item.Key}">${item.Value}</option>`);
                });

                elm.prop('selectedIndex', 0);
            }
        });
    }

    //下拉選單更改選取
    function onSelectOptionChange(e) {
        let targetId = e.target.id;
        let selectedValue = e.target.value;
        //let currentPage = $('#dg').datagrid('options').pageNumber;
        //let lastPage = $('#dg').datagrid('options').pageList;
        switch (targetId) {
            case "query_factory":
                queryfactoryGUID = e.target.value;
                $('#query_floor').val("");
                floorGUID = "";
                break;
            case "edit_factory":
                editfactoryGUID = e.target.value;
                $('#edit_floor').val("");
                floorGUID = "";
                break;
            case "import_factory":
                importfactoryGUID = e.target.value;
                $('#import_floor').val("");
                floorGUID = "";
                break;
        }

    }
    //#endregion

    //#region 驗證方法群
    //日期驗證(日期A,日期B,條件:=>,<=)
    function dateTimeValidation(dateTimeA, dateTimeB, condition) {
        let offset = Date.parse(dateTimeA).valueOf() - Date.parse(dateTimeB).valueOf();

        if (Number.isNaN(offset)) {
            return true;
        }

        switch (condition) {
            case '<=':
                return offset <= 0 ? true : false;
                break;
            case '>=':
                return offset >= 0 ? true : false;
                break;
            case '<':
                return offset < 0 ? true : false;
                break;
            case '>':
                return offset > 0 ? true : false;
                break;
        }
    }
    //#endregion

    $(function () {
        doc = new Doc($('#funcName').val(), sessionStorage.getItem('userLng'), 'content');
        doc.searchFile().then((val) => {
            doc.converStaticElm("content");
            PageInit();
            PageEventBind();
        });
    });
</script>